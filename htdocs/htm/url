%# Encode and decode url
%#
%# License: Artistic License
%#          http://www.opensource.org/licenses/artistic-license.php
%#
%# $Id: url,v 1.14 2004/06/05 04:28:25 sauber Exp $
%#
<%once>
  # The Bootstring encode object has high start up overhead,
  # so only start once.
  # The initialization values below works well in both byte mode and
  # in utf-8 mode for roman, cyrillic, greek, arabic and kanji letter.

  my $BS = new Bootstring(
      BASIC => ["a".."z", "A".."Z", "0".."9"],
      TMAX => 53,
      SKEW => 78,
      INITIAL_BIAS => 32,
      TMIN => 38,
      DAMP => 40,
      DELIMITER => '_',
  );
</%once>
<%method encode>
<%perl>
  my($link,%options) = @_;
  my($r,$k,$v);

  # Encode all parameters. Keys must be single letters. Use - for delimiter.
  while ( ($k,$v) = each %options ) {
    my $new_v = $BS->encode($v);
    $r .= "-$k${new_v}";
  }

  # Insert the encoded options into the url link, and return it.
  $link =~ s/(.*)\.(.*?)/$1$r.$2/;
</%perl>
<% $link %>\
</%method>
<%method decode>
<%perl>
  my($link) = @_;

  # Decode all parameters. - is delimiter. Each key is one letter.
  # . marks the end of the string to decode.
  my %O;
  while ( $link =~ s/(-)(.)(.*?)(?=[-.])// ) {
    $O{$2} = $BS->decode($3);
  }

  # All thumbnails are generated by pic.common regardless of type
  $link =~ s/pic\..*/pic\.common/;

  # Return the original string minus all the decoded parameters found,
  # and a ref to the hash of parameters.
  return $link,\%O;
</%perl>
</%method>
